function createSpotifyPlaylist(accessToken, userData, playlistName, playlistDescription, isPublic) {
  const userId = userData.id;
  const url = `https://api.spotify.com/v1/users/${userId}/playlists`;

  const requestOptions = {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${accessToken}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      name: playlistName,
      description: playlistDescription,
      public: isPublic
    })
  };

  return fetch(url, requestOptions)
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to create playlist');
      }
      return response.json();
    })
    .catch(error => {
      console.error('Error creating playlist:', error);
      throw error;
    });
}

// Example usage:

// Assuming you have a state variable to store user data
const [userData, setUserData] = useState(null);

useEffect(() => {
  async function getSpotifyProfile() {
    try {
      const data = await callSpotifyAPI("https://api.spotify.com/v1/me");
      setUserData(data);
    } catch (error) {
      console.error("Failed to fetch user data:", error);
    }
  }
  getSpotifyProfile();
}, [accessToken]);

// Later in your component, when you want to create a playlist
const playlistName = 'New Playlist';
const playlistDescription = 'New playlist description';
const isPublic = false;

if (userData) {
  createSpotifyPlaylist(accessToken, userData, playlistName, playlistDescription, isPublic)
    .then(playlistData => {
      console.log('Playlist created:', playlistData);
    })
    .catch(error => {
      console.error('Failed to create playlist:', error);
    });
}
